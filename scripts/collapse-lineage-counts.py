# This script was generated by ChatGPT-4 from the following prompt:
#
# ----------------------------------------------
# Please write a Python script to take a file of daily sequence counts of
# SARS-CoV-2 Pango lineages alongside an aliasing file to produce an updated
# counts file of collapsed Pango lineages. The daily counts file is named
# `prepared_seq_counts.tsv` and should be passed into the script via
# `--seq-counts`. This file looks like:
# ```
# location	variant	date	sequences
# USA	BA.2.3.20	2022-11-27	8
# USA	BA.2.3.20	2022-11-28	19
# USA	BA.2.3.20	2022-11-29	13
# USA	BA.2.3.20	2022-11-30	10
# USA	BQ.1.23	2022-12-08	32
# USA	EE.1	2022-12-09	10
# USA	XBB.1.5.33	2023-01-31	15
# ...
# ```
# where the column `sequences` represents count of sequences for a
# particular `variant` at a particular `location` on a particular `date`. The
# aliasing file is named `pango_aliasing.tsv` and should be passed into the
# script via `--aliasing`. This file looks like:
# ```
# seqName	clade	Nextclade_pango	partiallyAliased
# BA.2	21L	BA.2	BA.2
# BA.2.3.20	21L	BA.2.3.20	BA.2.3.20
# BQ.1.23	22E	BQ.1.23	BA.5.3.1.1.1.1.1.23
# EE.1	22E	EE.1	BA.5.3.1.1.1.1.1.1.4.1
# XBB.1.5.33	23A	XBB.1.5.33	XBB.1.5.33
# ```
# where the column `Nextclade_pango` in the aliasing file corresponds to the
# column `variant` in the sequence counts file.
#
# The first step of the script is to replace entries in sequence counts with
# `partiallyAliased` entry from the aliasing file. These `partiallyAliased`
# entries are expanded lineage notation such that BA.5.3.1.1.1.1.1 is the parent
# of lineage BA.5.3.1.1.1.1.1.23 and so forth.
#
# The next step of the script is to collapse lineages below a count threshold
# into their parent lineage. This integer count threshold is passed into the
# script via `--threshold`. This count threshold represents the total count for a
# particular lineage, ie it's the sum of `sequences` for a particular `variant`
# across `location` and `date` rows. For example, if the total count across
# `location` entries and `date` entries for BA.5.3.1.1.1.1.1.23 is below this
# threshold, then the `sequences` count will be added to the entries for
# corresponding `location` and `date` for parent lineage BA.5.3.1.1.1.1.1. If a
# lineage is below the threshold and has no parent lineage, ie XBB has no parent
# lineage, then collapse to a shared `other` lineage instead. Please print to
# terminal the remaining lineages and counts on each iteration of the collapse
# step.
#
# This collapsing step should be iterated multiple times until no lineages
# remain that are under the threshold count. The next step of the script is to
# de-alias entries and convert back to `Nextclade_pango` form.
# ----------------------------------------------
#
# Additionally, there was a bit of clean up to change name of `threshold` variable,
# to change name of `output` variable and a bit of dialog to remind GPT about the
# need to convert empty strings to `other` and also to aggregate the `sequences`
# column for each unique combination of `location`, `variant`, and `date`.

import argparse
import pandas as pd

def apply_aliasing(seq_counts, aliasing):
    aliasing_dict = aliasing.set_index("Nextclade_pango")["partiallyAliased"].to_dict()
    mapped_variants = seq_counts["variant"].map(aliasing_dict)

    # Find and print variants not found in aliasing_dict
    not_found_variants = seq_counts.loc[mapped_variants.isna(), "variant"].unique()
    if len(not_found_variants) > 0:
        print("Variants not found in aliasing_dict:", ", ".join(not_found_variants))

    seq_counts["variant"] = mapped_variants.fillna("other")
    return seq_counts

def get_parent(lineage):
    parts = lineage.split(".")
    if len(parts) > 1:
        return ".".join(parts[:-1])
    return "other"

def collapse_lineages(seq_counts, collapse_threshold):
    total_counts = seq_counts.groupby("variant")["sequences"].sum()
    low_count_lineages = total_counts[total_counts < collapse_threshold].index

    print("Starting variants:", len(seq_counts.groupby("variant")))

    while len(low_count_lineages) > 0:
        print("Low count lineages:", len(low_count_lineages))
        print(low_count_lineages)
        for lineage in low_count_lineages:
            parent = get_parent(lineage)
            seq_counts.loc[seq_counts["variant"] == lineage, "variant"] = parent

        total_counts = seq_counts.groupby("variant")["sequences"].sum()
        low_count_lineages = total_counts[total_counts < collapse_threshold].index

    print("Ending variants:", len(seq_counts.groupby("variant")))

    return seq_counts

def reverse_aliasing(seq_counts, aliasing):
    reverse_aliasing_dict = aliasing.set_index("partiallyAliased")["Nextclade_pango"].to_dict()
    reverse_aliasing_dict["other"] = "other"
    mapped_variants = seq_counts["variant"].map(reverse_aliasing_dict)

    # Find and print variants not found in reverse_aliasing_dict
    not_found_variants = seq_counts.loc[mapped_variants.isna(), "variant"].unique()
    if len(not_found_variants) > 0:
        print("Variants not found in reverse_aliasing_dict:", ", ".join(not_found_variants))

    seq_counts["variant"] = mapped_variants.fillna("other")
    return seq_counts

def aggregate_counts(seq_counts):
    return seq_counts.groupby(["location", "variant", "date"], as_index=False)["sequences"].sum()

def sort_output(seq_counts):
    return seq_counts.sort_values(["variant", "date"])

def save_seq_counts(seq_counts, output_file):
    seq_counts.to_csv(output_file, sep="\t", index=False)

def main():
    parser = argparse.ArgumentParser(description = "Given input sequence counts and \
        Pango aliasing file, collapse Pango lineages into their parental lineages \
        based on supplied threshold and output a new sequence counts file")
    parser.add_argument("--seq-counts", type=str, required=True, help="input TSV of sequence counts")
    parser.add_argument("--aliasing", type=str, required=True, help="input TSV of Pango aliasing")
    parser.add_argument("--collapse-threshold", type=int, default=1000, help="threshold count to collapse lineage into parental lineage")
    parser.add_argument("--output-seq-counts", type=str, required=True, help="output TSV of collapsed sequence counts")
    args = parser.parse_args()

    seq_counts = pd.read_csv(args.seq_counts, sep="\t")
    aliasing = pd.read_csv(args.aliasing, sep="\t")

    seq_counts = apply_aliasing(seq_counts, aliasing)
    seq_counts = collapse_lineages(seq_counts, args.collapse_threshold)
    seq_counts = reverse_aliasing(seq_counts, aliasing)
    seq_counts = aggregate_counts(seq_counts)
    seq_counts = sort_output(seq_counts)

    save_seq_counts(seq_counts, args.output_seq_counts)

if __name__ == "__main__":
    main()
